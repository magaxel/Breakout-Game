// https://developer.mozilla.org/en-US/docs/Games/Tutorials/2D_Breakout_game_pure_JavaScript
var canvasName = "myCanvas";

var gui = (function () {
    var canvas = document.getElementById(canvasName);
    var ctx = canvas.getContext("2d");

    var drawBall = function (ball) {
        ctx.beginPath();
        ctx.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2, false);
        ctx.fillStyle = ball.color;
        ctx.fill();
        ctx.closePath();
    };

    var drawPaddle = function (paddle) {
        ctx.beginPath();
        ctx.rect(paddle.x, paddle.y, paddle.width, paddle.height);
        ctx.fillStyle = paddle.color;
        ctx.fill();
        ctx.closePath();
    };

    var drawBricks = function (bricks) {
        bricks.forEach(function (brick) {
            ctx.beginPath();
            ctx.rect(brick.x, brick.y, brick.width, brick.height);
            ctx.fillStyle = brick.color;
            ctx.fill();
            ctx.closePath();
        });
    };

    var drawScore = function (scoreboard) {
        ctx.font = scoreboard.font;
        ctx.fillStyle = scoreboard.color;
        ctx.fillText("Score: " + scoreboard.score, scoreboard.x, scoreboard.y);
    };
    var drawLives = function (lives) {
        ctx.font = lives.font;
        ctx.fillStyle = lives.color;
        ctx.fillText("Lives: " + lives.lives, canvas.width - 65, 20);
    };

    var reDraw = function () {
        level = game.currentLevel;
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        level.ball = mechanics.ballMove(level.ball, level.paddle);
        level.paddle = mechanics.paddleMove(level.paddle);
        collisions = mechanics.collisionDetection(level.bricks, level.ball);
        level.ball = collisions.ball;
        level.bricks = collisions.bricks;
        drawBall(level.ball);
        drawPaddle(level.paddle);
        drawBricks(level.bricks);
        drawScore(game.scoreboard);
        drawLives(game.lives);
        requestAnimationFrame(reDraw);
    };

    return {
        reDraw: reDraw,
    };
})();

var mechanics = (function () {
    var canvas = document.getElementById(canvasName);

    var ballMove = function (ball, paddle) {
        var canvas = document.getElementById(canvasName);
        //Paddle collision
        if (ball.x > paddle.x && ball.x < paddle.x + paddle.width + ball.radius && ball.y > paddle.y && ball.y < paddle.y + paddle.height + ball.radius) {
            ball.ydest = -ball.ydest;
        }
        if (ball.x + ball.xdest > canvas.width - ball.radius || ball.x + ball.xdest < ball.radius) {
            ball.xdest = -ball.xdest;
        }

        if (ball.y + ball.ydest < ball.radius) {
            ball.ydest = -ball.ydest;
        } else if (ball.y + ball.ydest > canvas.height - ball.radius) {
            if (ball.x > paddle.x && ball.x < paddle.x + paddle.width) {
                ball.ydest = -ball.ydest;
            }
            else {
                document.location.reload();
            }
        }
        ball.x += ball.xdest;
        ball.y += ball.ydest;
        return ball;
    };

    var paddleMove = function (paddle) {

        if (controls.getRight() && paddle.x < canvas.width - paddle.width) {
            paddle.x += 7;
        }
        else if (controls.getLeft() && paddle.x > 0) {
            paddle.x -= 7;
        }
        return paddle;
    };

    var collisionDetection = function (bricks, ball) {
        bricks.forEach(function (brick) {
            if (ball.x > brick.x && ball.x < brick.x + brick.width + ball.radius && ball.y > brick.y && ball.y < brick.y + brick.height + ball.radius) {
                ball.ydest = -ball.ydest;
                brick.isHit();
                game.scoreboard.addScore(1);
            }
        });
        // Remove collisoned bricks from array
        bricks = bricks.filter(brick => brick.health > 0);
        if (bricks.length === 0) {
            game.nextLevel();
            if (game.currentLevel == null) {
                alert("you have bested the game");
                document.location.reload();
            }
        }
        return {
            bricks: bricks,
            ball: ball
        };
    };

    return {
        ballMove: ballMove,
        paddleMove: paddleMove,
        collisionDetection: collisionDetection
    };
})();

var controls = (function () {
    var canvas = document.getElementById(canvasName);
    var rightPressed = false;
    var leftPressed = false;

    var keyDownHandler = function (e) {
        if (e.keyCode == 39) {
            rightPressed = true;
        }
        else if (e.keyCode == 37) {
            leftPressed = true;
        }
    };

    var keyUpHandler = function (e) {
        if (e.keyCode == 39) {
            rightPressed = false;
        }
        else if (e.keyCode == 37) {
            leftPressed = false;
        }
    };

    var getRight = function () {
        return rightPressed;
    };

    var getLeft = function () {
        return leftPressed;
    };

    var mouseMoveHandler = function (e) {
        var relativeX = e.clientX - canvas.offsetLeft;
        if (relativeX > 0 && relativeX < canvas.width) {
            game.currentLevel.paddle.x = relativeX - game.currentLevel.paddle.width / 2;
        }
    };

    return {
        keyDownHandler: keyDownHandler,
        keyUpHandler: keyUpHandler,
        getLeft: getLeft,
        getRight: getRight,
        mouseMoveHandler: mouseMoveHandler
    };
})();

var build = (function () {
    var canvas = document.getElementById(canvasName);
    var scoreboard = function () {
        scoreboard = new Scoreboard({ font: gamedata.scoreboard.font, color: gamedata.scoreboard.color, x: gamedata.scoreboard.x, y: gamedata.scoreboard.y, score: gamedata.scoreboard.score });
        return scoreboard;
    };
    var lives = function () {
        lives = new Lives({ font: gamedata.lives.font, color: gamedata.lives.color, x: gamedata.lives.x, y: gamedata.lives.y, score: gamedata.lives.lives });
        return lives;
    };

    var levels = function () {
        return gamedata.levels.map(l => new Level({
            ball: new Ball({ x: canvas.width / 2, y: canvas.height - l.paddle.height -l.ball.radius, radius: l.ball.radius, color: l.ball.color, xdest: -1, ydest: -2 }),
            paddle: new Paddle({ x: (canvas.width - l.paddle.width) / 2, y: canvas.height - l.paddle.height, width: l.paddle.width, height: l.paddle.height, color: l.paddle.color }),
            bricks: l.bricks.map(b => new Brick({ x: b.x, y: b.y, height: b.height, width: b.width, color: b.color, health: b.health })),
            id: l.id
        }));
    };

    var game = function () {
        game = new Game({ name: gamedata.name, lives: lives(), scoreboard: scoreboard(), levels: levels(), level: gamedata.startLevel });
        return game;
    };

    return {
        game: game,
    };
})();

var game = build.game();
document.addEventListener("mousemove", controls.mouseMoveHandler, false);
document.addEventListener("keydown", controls.keyDownHandler, false);
document.addEventListener("keyup", controls.keyUpHandler, false);
gui.reDraw();
